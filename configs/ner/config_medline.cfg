# --- Global variables ---

[vars]
train = "../../data/QUAERO/corpus/train_dev/MEDLINE"
val = "../../data/QUAERO/corpus/dev/MEDLINE"
test = "../../data/QUAERO/corpus/test/MEDLINE"
gold_span_group = {"gold_spans": ["ANAT","CHEM","DEVI","DISO","GEOG","LIVB","OBJC","PHEN","PHYS","PROC"]}
bert = "../../models/word-embedding/camembert-bio-base"

# --- Pipeline ---

[nlp]
lang = "eds"
pipeline = ["normalizer", "sentencizer", "ner"]
batch_size = 8
components = ${components}
tokenizer = {"@tokenizers": "eds.tokenizer"}

[components.normalizer]
@factory = "eds.normalizer"

[components.sentencizer]
@factory = "eds.sentences"

# NER component
[components.ner]
@factory = "eds.ner_crf"
mode = "joint"
window = 0
target_span_getter = ${vars.gold_span_group}
# Set spans as both to ents and in separate `ent.label` groups
span_setter = ["ents", "*"]
infer_span_setter = true

[components.ner.embedding]
@factory = "eds.text_cnn"
kernel_sizes = [3]

[components.ner.embedding.embedding]
@factory = "eds.transformer"
model = ${vars.bert}
window = 128
stride = 96

# --- Scorers ---

[scorer.ner.exact_ner]
@scorers = "eds.ner_exact_scorer"
span_getter = ${vars.gold_span_group}

# --- Data ---

[val_data]
[val_data.source]
@readers = "standoff"
path = ${vars.val}
span_setter = ${vars.gold_span_group}

[test_data]
[test_data.source]
@readers = "standoff"
path = ${vars.test}
span_setter = ${vars.gold_span_group}

[ner_train_dataloader]
batch_size = 2000 words
grad_accumulation_max_tokens = ${512 * 128}
pipe_names = ["ner"]
[ner_train_dataloader.data]
randomize = true
max_length = 0
multi_sentence = true
[ner_train_dataloader.data.source]
@readers = "standoff"
path = ${vars.train}
span_setter = ${vars.gold_span_group}

# --- Scripts ---

[train]
nlp = ${nlp}
seed = 37
max_steps = 4000
validation_interval = ${train.max_steps//10}
warmup_rate = 0.1
transformer_lr = 5e-5
task_lr = 5e-5
scorer = ${scorer}
train_dataloader = [${ner_train_dataloader}]
val_data = ${val_data}
test_data = ${test_data}
loss_scales = {"ner": 1}
output_dir = "../../models/trained_ner/MEDLINE"

[evaluate]
scorer = ${scorer}
model_path = "../../models/trained_ner/MEDLINE/model-last"
data = ${test_data}
output = "../../data/QUAERO/corpus/pred/MEDLINE"
