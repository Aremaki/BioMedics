# --- Global variables ---

[vars]
train = "../../data/annotated_CRH/post_processed/expe_complete_pipe/train"
test = "../../data/annotated_CRH/post_processed/expe_complete_pipe/test"
gold_span_group = {"gold_spans": ["DISO", "Constantes", "BIO_comp", "Chemical_and_drugs", "dosage", "BIO", "strength", "form", "SECTION_antecedent", "SECTION_motif", "SECTION_histoire", "SECTION_examen_clinique", "SECTION_examen_complementaire", "SECTION_mode_de_vie", "SECTION_traitement_entree", "SECTION_antecedent_familiaux", "SECTION_traitement_sortie", "SECTION_conclusion", "Date", "Duration", "Frequency"]}
default_attributes = {"Certainty": "Certain", "Temporality": "Present"}
bert = "/data/scratch/cse200093/word-embedding/finetuning-camembert-2021-07-29"

# --- Pipeline ---

[nlp]
lang = "eds"
pipeline = ["normalizer", "sentencizer", "ner", "qualifier"]
batch_size = 8
components = ${components}
tokenizer = {"@tokenizers": "eds.tokenizer"}

[components.normalizer]
@factory = "eds.normalizer"

[components.sentencizer]
@factory = "eds.sentences"

# NER component
[components.ner]
@factory = "eds.ner_crf"
mode = "joint"
window = 40
target_span_getter = ${vars.gold_span_group}
# Set spans as both to ents and in separate `ent.label` groups
span_setter = [ "ents", "*" ]
infer_span_setter = true

[components.ner.embedding]
@factory = "eds.text_cnn"
kernel_sizes = [3]

[components.ner.embedding.embedding]
@factory = "eds.transformer"
model = ${vars.bert}
window = 128
stride = 96

# Qualifier component
[components.qualifier]
@factory = "eds.span_classifier"
keep_none = true
span_getter = {"Chemical_and_drugs": True, "gold_spans": "Chemical_and_drugs"}
context_getter = {
    "@misc": "eds.span_context_getter",
    "span_getter": ${components.qualifier.span_getter},
    "context_words": 30,
    "context_sents": 0
    }

[components.qualifier.attributes]
Action = ["Chemical_and_drugs"]
Certainty = ["Chemical_and_drugs"]
Temporality = ["Chemical_and_drugs"]
Negation = ["Chemical_and_drugs"]

[components.qualifier.embedding]
@factory = "eds.span_pooler"

[components.qualifier.embedding.embedding]
@factory = "eds.text_cnn"
kernel_sizes = [3]

# Second non-shared bert transformer
[components.qualifier.embedding.embedding.embedding]
@factory = "eds.transformer"
model = ${vars.bert}
window = 255
stride = 128

# --- Scorers ---

[scorer.ner.exact_ner]
@scorers = "eds.ner_exact_scorer"
span_getter = ${vars.gold_span_group}

[scorer.qualifier.qualifier]
@scorers = "eds.span_classification_scorer"
span_getter = ${components.qualifier.span_getter}
qualifiers = ${components.qualifier.attributes}
default_values = ${vars.default_attributes}

# --- Data ---

[test_data]
[test_data.source]
@readers = "standoff"
path = ${vars.test}
span_setter = ${vars.gold_span_group}
default_attributes = ${vars.default_attributes}

[ner_train_dataloader]
batch_size = 2000 words
grad_accumulation_max_tokens = ${512 * 128}
pipe_names = ["ner"]
[ner_train_dataloader.data]
randomize = true
max_length = 128
multi_sentence = true
[ner_train_dataloader.data.source]
@readers = "standoff"
path = ${vars.train}
span_setter = ${vars.gold_span_group}
default_attributes = ${vars.default_attributes}

[qlf_train_dataloader]
batch_size = 64 spans
grad_accumulation_max_tokens = ${512 * 128}
pipe_names = ["qualifier"]
[qlf_train_dataloader.data]
randomize = true
max_length = 128
multi_sentence = true
filter_expr = "sum([e.label_ == 'Chemical_and_drugs' for e in doc.spans['gold_spans']]) > 0"
[qlf_train_dataloader.data.source]
@readers = "standoff"
path = ${vars.train}
span_setter = ${vars.gold_span_group}
default_attributes = ${vars.default_attributes}

# --- Scripts ---

[train]
nlp = ${nlp}
seed = 37
max_steps = 5000
validation_interval = ${train.max_steps}
warmup_rate = 0.1
transformer_lr = 5e-5
task_lr = 5e-5
scorer = ${scorer}
train_dataloader = [${ner_train_dataloader}, ${qlf_train_dataloader}]
val_data = ${test_data}
test_data = ${test_data}
loss_scales = {"ner": 1, "qualifier": 100}
output_dir = "../../models/ner/expe_complete_pipe"

[evaluate]
scorer = ${scorer}
model_path = "../../models/ner/expe_complete_pipe/model-last"
data = ${test_data}

[infer]
input_folders = ["../../data/annotated_CRH/post_processed/expe_complete_pipe/test"]
model_path = "../../models/ner/expe_complete_pipe/model-last"
output_folders = ["../../data/annotated_CRH/post_processed/expe_complete_pipe/pred/ner"]
